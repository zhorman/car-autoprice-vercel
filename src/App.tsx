// src/App.tsx
import { useState } from 'react';
import './App.css';
import ImageUploader from './components/ImageUploader';

// 1. –°–æ–∑–¥–∞—ë–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–¥–Ω–æ–π –¥–µ—Ç–∞–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è
interface IDamageDetail {
  partName: string;
  damageType: string;
  estimatedHours: number;
}

// 2. –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
interface IResultData {
  totalHours: number;
  details: IDamageDetail[]; // –ú–∞—Å—Å–∏–≤ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
  summary: string;
}

function App() {
  // –¢–∏–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º, –Ω–æ —Ç–µ–ø–µ—Ä—å –æ–Ω —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  const [result, setResult] = useState<IResultData | null>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>('');

  const handleEstimate = async ({
    image,
    text,
  }: {
    image: File;
    text: string;
  }) => {
    setLoading(true);
    setError('');
    setResult(null);

    const formData = new FormData();
    formData.append('image', image);
    formData.append('text', text);

    try {
      const response = await fetch('/api/estimate', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞.');
      }

      const data: IResultData = await response.json();
      setResult(data);
    } catch (err: unknown) {
      let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
      if (err instanceof Error) {
        errorMessage = err.message;
      }
      setError(errorMessage);
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="app-container">
      <header className="app-header">
        <h1>–ù–µ–π—Ä–æ–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–æ—Ä–º–æ—á–∞—Å–æ–≤ —Ä–µ–º–æ–Ω—Ç–∞ –∞–≤—Ç–æ üöó</h1>
        <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏.</p>
      </header>
      <main>
        <ImageUploader onEstimate={handleEstimate} />
        {loading && <div className="loader"></div>}
        {error && <p className="error-message">{error}</p>}

        {/* --- 3. –ü–û–õ–ù–û–°–¢–¨–Æ –û–ë–ù–û–í–õ–Å–ù–ù–´–ô –ë–õ–û–ö –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–ê --- */}
        {result && (
          <div className="result-container">
            <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏:</h2>
            <div className="summary-section">
              <p>
                <strong>–û–±—â–∏–µ –Ω–æ—Ä–º–æ—á–∞—Å—ã:</strong>
                <span>{result.totalHours} —á.</span>
              </p>
              <p>
                <strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π AI:</strong> {result.summary}
              </p>
            </div>

            <h3>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç:</h3>
            <table className="details-table">
              <thead>
                <tr>
                  <th>–î–µ—Ç–∞–ª—å</th>
                  <th>–¢–∏–ø –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è</th>
                  <th>–ù–æ—Ä–º–æ—á–∞—Å—ã</th>
                </tr>
              </thead>
              <tbody>
                {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º .map() –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã */}
                {result.details.map((detail, index) => (
                  <tr key={index}>
                    <td>{detail.partName}</td>
                    <td>{detail.damageType}</td>
                    <td>{detail.estimatedHours}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </main>
    </div>
  );
}

export default App;
